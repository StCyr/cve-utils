#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long;
use Log::Message::Simple;
use LWP::Simple;
use JSON::PP;
use Pod::Usage;

binmode STDOUT, ":encoding(UTF-8)";

local $Log::Message::Simple::MSG_FH     = \*STDERR;
local $Log::Message::Simple::DEBUG_FH   = \*STDERR;

# Get options
my ($debug,$help,$verbose) = 0;
my ($vendor,$soft,$version);

GetOptions( 'debug' => \$debug,
  'help' => \$help,
  'soft=s'   => \$soft,
  'vendor=s'  => \$vendor,
  'verbose' => \$verbose,
  'version=s' => \$version,
);

if (!defined $soft or !defined $vendor) {
  pod2usage(3);
}

pod2usage(3) if $help;

$verbose=1 if $debug;

my $cvesearch_url = "https://cve.circl.lu/api/search/" . $vendor . "/" . $soft;

msg("Looking for CVE at $cvesearch_url...",$verbose);

my $json = get($cvesearch_url);

if ($json) {

   my $decoded_json = decode_json($json);

   # Parse the list of retrieved CVE and find which apply to our version
   if (scalar @$decoded_json) {

     msg("Found " . scalar @$decoded_json . " CVE(s) for product $soft from $vendor.",$verbose);

     # Add version information if given
     my $cpe = "$vendor:$soft";
     if ($version) { 
       $cpe = $cpe . ":$version";
       debug("Looking up for CVE applicable to $soft:$vendor:$version",$debug);
     } else {
       debug("No version given, giving all CVE applicable to $soft:$vendor",$debug);
     }

     # Look up for CVE applicable to particular configuration
     my $found;
     foreach my $cve ( @$decoded_json ) { 
       my $vulnerable = $cve->{vulnerable_configuration};
       if ( grep /$cpe/, @$vulnerable) { 
         print "$cve->{id} (CVSS=$cve->{cvss}) Summary=$cve->{summary}\n";
         $found++; 
       }
     }

     # $found can only be empty when a version has been defined
     msg("No CVE found for your particular version",$verbose) if ( ! $found );

   } else {
     msg("NO CVE found for software \"$soft\" from \"$vendor\"",$verbose);
   }

} else {
   die "Error while trying to retrieve CVE's at $cvesearch_url";
} 

__END__

=head1 cve-search.pl

cve-search.pl - A simple program that uses CIRCL's CVE search web service (https://www.circl.lu/services/cve-search/) to find CVE applying to the product given in argument

=head1 SYNOPSIS

cve-search.pl --vendor <vendor_name> --soft <software_name> [--version <version> --debug --help --verbose]

  Options:
    --debug   print debugging information (implies "--verbose")
    --help    print this text
    --vendor  Mandatory: Name of the product's vendor (eg: Microsoft, Mozilla,...)
    --verbose Mandatory: Name of the product (eg: Chrome, Acrobat reader,...)
    --version Optionaly: version considered (eg: 2.3.6)

=cut
