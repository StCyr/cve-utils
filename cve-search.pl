#!/usr/bin/perl

use Getopt::Long;
use LWP::Simple;
use JSON::PP;
use Pod::Usage;

my ($vendor,$soft,$version)=@ARGV;

if (!defined $soft or !defined $vendor) {
  pod2usage(3);
}

my $cvesearch_url = "https://cve.circl.lu/api/search/" . $vendor . "/" . $soft;

my $json = get($cvesearch_url);

if ($json) {

   my $decoded_json = decode_json($json);

   # Parse the list of retrieved CVE and find which apply to our version
   if (scalar @$decoded_json) {

     my $found;
     foreach my $cve ( @$decoded_json ) { 
       my $vulnerable = $cve->{vulnerable_configuration};
       if ( grep /$vendor:$soft:$version/, @$vulnerable) { print "$cve->{id} (CVSS=$cve->{cvss}) Summary=$cve->{summary}\n"; $found++; }
     }

     if (!defined $found) {
       print "CVE found for software \"$soft\" from \"$vendor\", but none apply to version \"$version\"\n";
     } 

   } else {
     print "NO CVE found for software \"$soft\" from \"$vendor\"\n";
   }

} else {
   die "Error while trying to retrieve CVE's at $cvesearch_url";
} 

__END__

=head1 cve-search.pl

cve-search.pl - A simple program that uses CIRCL's CVE search web service (https://www.circl.lu/services/cve-search/) to find CVE applying to the product given in argument

=head1 SYNOPSIS

cve-search.pl "<vendor>" "<soft>" "<version>"

  Options:
    <vendor>   Mandatory: Name of the product's vendor (eg: Microsoft, Mozilla,...)
    <soft>     Mandatory: Name of the product (eg: Chrome, Acrobat reader,...)
    <version>  Optionaly: version considered (eg: 2.3.6)

All arguments must be quoted.

=cut
