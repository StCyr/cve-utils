#!/usr/bin/perl
use strict;
use warnings;

use Perl::Version;
use Getopt::Long;
use Log::Message::Simple;
use LWP::Simple;
use JSON::PP;
use Pod::Usage;

binmode STDOUT, ":encoding(UTF-8)";

local $Log::Message::Simple::MSG_FH     = \*STDERR;
local $Log::Message::Simple::DEBUG_FH   = \*STDERR;

# Get options
my ($all,$debug,$help,$verbose) = 0;
my ($vendor,$soft,$version);

GetOptions( 
  'all'       => \$all,
  'debug'     => \$debug,
  'help'      => \$help,
  'soft=s'    => \$soft,
  'vendor=s'  => \$vendor,
  'verbose'   => \$verbose,
  'version=s' => \$version,
);

if (!defined $soft or !defined $vendor) {
  pod2usage(3);
}

pod2usage(3) if $help;

$verbose=1 if $debug;

# Call CIRCL API
my $cvesearch_url = "https://cve.circl.lu/api/search/" . $vendor . "/" . $soft;
msg("Looking for CVE at $cvesearch_url.",$verbose);
my $json = get($cvesearch_url);

# Analyze answer
if ($json) {

   my $decoded_json = decode_json($json);

   # Parse the list of retrieved CVE and find which apply to our version
   if (scalar @$decoded_json) {

     msg("Found " . scalar @$decoded_json . " CVE(s) for product $soft from $vendor.",$verbose);

     # Add version information if given
     my $soft_version;
     if ($version) { 
       $soft_version = Perl::Version->new( $version );
       msg("Looking up for CVE applicable to version $version",$verbose);
     } else {
       msg("No version given, returning all CVE applicable to product",$verbose);
     }

     # Parse all CVEs found for software
     my $found;
CVE: 
     foreach my $cve ( @$decoded_json ) { 

       if ( ! $version ) {
         print "$cve->{id} (CVSS=$cve->{cvss}) Summary=$cve->{summary}\n";
         $found++;
         next;
       }

       msg("Analyzing $cve->{id}",$verbose);

       # Parse all vulnerable configurations for that CVE
CONFIG:
       foreach my $vulnerable_config ( $cve->{vulnerable_configuration} ) {

         # Parse all product versions listed in the vulnerable configuration
PRODUCT:
         foreach my $config ( @$vulnerable_config ) {

           my @config = split( ':', $config );

           # Skip configuration if not applicable to an application
           if ( $config[2] ne 'a' and not $all) {
             debug("Skipping configuration $config because it doesn't concern an application (specify '--al' to override this test)",$debug);
             next;
           }

           # Skip configuration if not applicable to this product (some CVE apply to several products)
           if ( $config[4] ne $soft ) {
             debug("Skipping configuration $config because it doesn't concern this product",$debug);
             next;
           }
           
           if ( scalar @config < 6 ) {

             # No vulnerable version given, assume all versions are vulnerables
             print "$cve->{id} matches all product versions (CVSS=$cve->{cvss}) Summary=$cve->{summary}\n";
             $found++; 
             next CVE;

           } else {

             # Do both versions match?
             my $vuln_version = Perl::Version->new( $config[5] );
    	     if ( $soft_version->vcmp( $vuln_version ) == 0 ) {         
               print "$cve->{id} exactly matches version $version (CVSS=$cve->{cvss}) Summary=$cve->{summary}\n";
               $found++; 
               next CVE;
             } elsif ( $soft_version->vcmp( $vuln_version ) < 0 ) {
               print "$cve->{id} applies to higher version ($config[5]) than $version, must assume a match (CVSS=$cve->{cvss}) Summary=$cve->{summary}\n";
               $found++; 
               next CVE;
             }

           }

         }

       }

     }

     # $found can only be empty when a version has been defined
     msg("No CVE found for your particular version",$verbose) if ( ! $found );

   } else {
     msg("NO CVE found for software \"$soft\" from \"$vendor\"",$verbose);
   }

} else {
   die "Error while trying to retrieve CVE's at $cvesearch_url";
} 

__END__

=head1 cve-search.pl

cve-search.pl - A simple program that uses CIRCL's CVE search web service (https://www.circl.lu/services/cve-search/) to find CVE applying to the product given in argument

=head1 SYNOPSIS

cve-search.pl --vendor <vendor_name> --soft <software_name> [--version <version> --debug --help --verbose]

  Options:
    --all     Search for all type of CPE, not only those of type "applications"
    --debug   print debugging information (implies "--verbose")
    --help    print this text
    --soft    Mandatory: Name of the product (eg: Chrome, Acrobat reader,...)
    --vendor  Mandatory: Name of the product's vendor (eg: Microsoft, Mozilla,...)
    --verbose print verbose information 
    --version Optionaly: version considered (eg: 2.3.6)

=cut
